# -*- coding: utf-8 -*-
"""
Untitled3.ipynb

Problem: Recognizing images using a neural network
Dataset: https://www.cs.toronto.edu/~kriz/cifar.html
Authors: Łukasz Reinke <s15037@pjwstk.edu.pl>
Created following @vesuvius13 tutorial: https://www.kaggle.com/vesuvius13

Automatically generated by Colaboratory.

"""

# Importowanie niezbędnych bibliotek
from tensorflow.keras.datasets import cifar10
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPool2D, Dense, Flatten, Dropout, Input, AveragePooling2D, Activation, BatchNormalization, Concatenate
from tensorflow.keras.callbacks import EarlyStopping, TensorBoard
from tensorflow.keras import regularizers, optimizers
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.utils import to_categorical
import numpy as np
import pandas as pd

# Wczytywanie danych
(x_train, y_train), (x_test, y_test) = cifar10.load_data()

# Wyświetlanie kształtu danych
print('Shape of x_train is {}'.format(x_train.shape))
print('Shape of x_test is {}'.format(x_test.shape))
print('Shape of y_train is {}'.format(y_train.shape))
print('Shape of y_test is {}'.format(y_test.shape))

# Normalizacja danych
x_train = x_train / 255
x_test = x_test / 255

# One-hot encoding dla etykiet klas
y_train_cat = to_categorical(y_train, 10)
y_test_cat = to_categorical(y_test, 10)

# Definiowanie modelu
model1 = Sequential()
model1.add(Conv2D(filters=32, kernel_size=(4, 4), input_shape=(32, 32, 3), activation='relu'))
model1.add(MaxPool2D(pool_size=(2, 2)))
model1.add(Conv2D(filters=32, kernel_size=(4, 4), input_shape=(32, 32, 3), activation='relu'))
model1.add(MaxPool2D(pool_size=(2, 2)))
model1.add(Flatten())
model1.add(Dense(256, activation='relu'))
model1.add(Dense(10, activation='softmax'))
model1.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

# Wyświetlanie informacji o modelu
model1.summary()

# Trenowanie modelu
history1 = model1.fit(x_train, y_train_cat, epochs=20, validation_data=(x_test, y_test_cat))

# Ocena modelu na danych testowych
evaluation = model1.evaluate(x_test, y_test_cat)
print('Test Accuracy: {}'.format(evaluation[1]))

# Wyświetlanie wykresu dokładności i straty w trakcie treningu
pd.DataFrame(history1.history).plot()